STMicroelectronics/repositories?q=stm32f7 > 14 repos
STM32CubeF7,stm32f7xx-hal-driver,cmsis-device-f7,stm32f7xx-nucleo-144-bsp, +3*AI+azrtos+6*bsp âˆ‘ 14 u+2211
 huge      |             n      |        k      |              k         |       n   out of interest
stm32f7xx-nucleo-144-bsp/blob/main/stm32f7xx_nucleo_144.h (+stm32f7xx_nucleo_144.c)
#ifndef __STM32F7XX_NUCLEO_144_H
#define __STM32F7XX_NUCLEO_144_H
#ifdef __cplusplus
 extern "C" {
#endif
#include "stm32f7xx_hal.h"
@brief   This file contains definitions for:
  *          - LEDs and push-button available on STM32F7XX-Nucleo-144 Kit 
  *            from STMicroelectronics
  *          - LCD, joystick and microSD available on Adafruit 1.8" TFT LCD 
  *            shield (reference ID 802)
-------lots of #def Remaps to __HAL_[...] & GPIO[...]
actually it'sa da first time i encounter an stm folder/repo with only 2(meaningfull) files.
But there is a text note, that stm32-bsp-common is also kindof to be used. Commons structure is also flat
a dozen headers.

cmsis-device-f7 gh/about: Provides the STM32Cube MCU Component "cmsis_device_f7" of the STM32F7 series.
sounds good.  Include & Source folder
Include/stm32f767xx.h > includes "system_stm32f7xx.h" , "core_cm7.h"/*!< Cortex-M7 processor and core peripherals*/
offsets for registers (kindof reference manual) + perif memory map (#def BASE 0x...UL \n #def REG BASE+0x...UL)
+ Bit Masks + IS_[...]_ALL_INSTANCE macros
typedef struct{
  __IO uint32_t CR1;        /*!< SPI control register 1 (not used in I2S mode),      Address offset: 0x00 */
  __IO uint32_t CR2;        /*!< SPI control register 2,                             Address offset: 0x04 */
  __IO uint32_t SR;         /*!< SPI status register,                                Address offset: 0x08 */
  __IO uint32_t DR;         /*!< SPI data register,                                  Address offset: 0x0C */
  __IO uint32_t CRCPR;      /*!< SPI CRC polynomial register (not used in I2S mode), Address offset: 0x10 */
  __IO uint32_t RXCRCR;     /*!< SPI RX CRC register (not used in I2S mode),         Address offset: 0x14 */
  __IO uint32_t TXCRCR;     /*!< SPI TX CRC register (not used in I2S mode),         Address offset: 0x18 */
  __IO uint32_t I2SCFGR;    /*!< SPI_I2S configuration register,                     Address offset: 0x1C */
  __IO uint32_t I2SPR;      /*!< SPI_I2S prescaler register,                         Address offset: 0x20 */
} SPI_TypeDef;
#define SRAM1_BASE 0x20020000UL /*!< Base address of : 368KB RAM1 accessible over AXI/AHB */ correct! 2002'0000
Include/stm32f7xx.h grep: system_stm32f7xx.c:47:#include "stm32f7xx.h"
#elif defined(STM32F767xx) \n #include "stm32f767xx.h"

*@file    Source/Templates/system_stm32f7xx.c 
  * @brief   CMSIS Cortex-M7 Device Peripheral Access Layer System Source File.
  *
  *   This file provides two functions and one global variable to be called from 
  *   user application:
  *      - SystemInit(): This function is called at startup just after reset and 
  *                      before branch to main program. This call is made inside
  *                      the "startup_stm32f7xx.s" file.
  *
  *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  *                                  by the user application to setup the SysTick 
  *                                  timer or configure other parameters.
  *                                     
  *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  *                                 be called whenever the core clock is changed
  *                                 during program execution.
Source/Templates/gcc/startup_stm32f767xx.s + other device dependant 
explicitly statet in Makefile to use as source
  * @file      startup_stm32f767xx.s
  * @author    MCD Application Team
  * @brief     STM32F767xx Devices vector table for GCC based toolchain. 
  *            This module performs:
  *                - Set the initial SP
  *                - Set the initial PC == Reset_Handler,
  *                - Set the vector table entries with the exceptions ISR address
  *                - Branches to main in the C library (which eventually
  *                  calls main()).
  *            After Reset the Cortex-M7 processor is in Thread mode,
  *            priority is Privileged, and the Stack is set to Main.
NVIC table + segments handling: data copy, zeroing bss

recap cpq's usage of cmsis (step 5) :
clone CMSIS_5 && clone cmsis-device-f7 into include & symLinks to those cloned repos
own hal.h, which includes device specific #include "stm32f767xx.h"//"stm32f429xx.h"
own linkerScript with usage of ENTRY(Reset_Handler); + .vectors  : { KEEP(*(.isr_vector)) }   > flash
own syscalls.c with IO/retargeting
SOURCES  = main_con_cmsis.c syscalls.c cmsis_f7/Source/Templates/gcc/startup_stm32f767xx.s
-Icmsis_core/CMSIS/Core/Include -Icmsis_f7/Include in CFLAGS
that was it, neither cube nor xx-hal-driver used.
