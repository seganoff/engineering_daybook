apt install build-essential libssl-dev pkg-config qemu-system-arm openocd gdb-multiarch
rustup target add thumbv6m-none-eabi thumbv7m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf
rustup component add llvm-tools
cargo install cargo-binutils cargo-generate

cargo generate --git https://github.com/rust-embedded/cortex-m-quickstart
2.6 exceptions
kill -9 $(pidof qemu-system-arm) # from book, qemu is just frozen > change main.rs to: (examples/exception.rs)
#![deny(unsafe_code)]
#![no_main]
#![no_std]

use panic_halt as _;

use cortex_m::peripheral::syst::SystClkSource;
use cortex_m::Peripherals;
use cortex_m_rt::{entry, exception};
use cortex_m_semihosting::{debug,hprint};

#[entry]
fn main() -> ! {
    let p = Peripherals::take().unwrap();
    let mut syst = p.SYST;

    // configures the system timer to trigger a SysTick exception every second
    syst.set_clock_source(SystClkSource::Core);
    syst.set_reload(/*12*/8_000_000); // period = 1s
    syst.enable_counter();
    syst.enable_interrupt();

    loop {}
}

#[exception]
fn SysTick() {
static mut COUNT: u32 = 0;
*COUNT+=1;hprint!(".{}",*COUNT);if *COUNT==9{hprint!("\u{0a}");debug::exit(debug::EXIT_SUCCESS);}
}

